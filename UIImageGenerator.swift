#!/usr/bin/env xcrun -sdk macosx swift

import Foundation


let fileManager = NSFileManager.defaultManager()
let rootPath = Process.arguments[1]


func camelCaseString(source: String) -> String {
    
    if contains(source, " ") {
        let first = source.substringToIndex(advance(source.startIndex, 1))
        let cammel = NSString(format: "%@", (source as NSString).capitalizedString.stringByReplacingOccurrencesOfString(" ", withString: "", options: nil, range: nil)) as String
        let rest = dropFirst(cammel)
        return "\(first)\(rest)"

    } else if contains(source, "-") {
        let first = source.substringToIndex(advance(source.startIndex, 1))
        let cammel = NSString(format: "%@", (source as NSString).capitalizedString.stringByReplacingOccurrencesOfString("-", withString: "", options: nil, range: nil)) as String
        let rest = dropFirst(cammel)
        return "\(first)\(rest)"
    
    } else if contains(source, "_") {
        let first = source.substringToIndex(advance(source.startIndex, 1))
        let cammel = NSString(format: "%@", (source as NSString).capitalizedString.stringByReplacingOccurrencesOfString("_", withString: "", options: nil, range: nil)) as String
        let rest = dropFirst(cammel)
        return "\(first)\(rest)"
    
    } else {
        let first = (source as NSString).lowercaseString.substringToIndex(advance(source.startIndex, 1))
        let rest = dropFirst(source)
        return "\(first)\(rest)"
    }
}


func parseImageset(path: String) {
    
    if let imagesetName = path.componentsSeparatedByString(".").first {

        let normalizedName = camelCaseString(imagesetName)
        println("       static let \(normalizedName) = UIImage(named: \"\(imagesetName)\")")
    }
        
    else {
        
        println("// ERROR - Couldn't find name for image set")
    }
}


func parseAssetCatalog(path: String) {
    
    let filename = path.componentsSeparatedByString("/").last ?? path
    
    if let catalogName = filename.componentsSeparatedByString(".").first {
        
        println("")
        println("   // \(catalogName)")
        println("   struct \(catalogName) {")

        let fullPath = rootPath + "/" + path
        
        if let paths = fileManager.subpathsAtPath(fullPath) {

            for path in paths.filter({ $0.hasSuffix("imageset") }) {
                
                parseImageset(path as! String)
            }
        }
        
        println("   }")
    }
        
    else {
        
        println("// ERROR - Couldn't find name for asset catalog")
    }
}


if let paths = fileManager.subpathsAtPath(rootPath) {
    
    println("// ******************************************** ")
    println("// ** Autogenerated file from UIImageGenerator")
    println("// ********************************************")
    println()
    
    println("import UIKit")
    println()
    println("extension UIImage { ")
    
    for path in paths.filter({ $0.hasSuffix("xcassets") }) {
        
        parseAssetCatalog(path as! String)
    }
    
    println("}")
}